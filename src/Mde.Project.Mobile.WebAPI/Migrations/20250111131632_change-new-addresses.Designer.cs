// <auto-generated />
using System;
using Mde.Project.Mobile.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mde.Project.Mobile.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250111131632_change-new-addresses")]
    partial class changenewaddresses
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CargoProduct", b =>
                {
                    b.Property<Guid>("CargosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CargosId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CargoProduct");

                    b.HasData(
                        new
                        {
                            CargosId = new Guid("00000000-0000-0000-0000-000000000031"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000021")
                        },
                        new
                        {
                            CargosId = new Guid("00000000-0000-0000-0000-000000000031"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000022")
                        },
                        new
                        {
                            CargosId = new Guid("00000000-0000-0000-0000-000000000032"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000021")
                        },
                        new
                        {
                            CargosId = new Guid("00000000-0000-0000-0000-000000000032"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000022")
                        },
                        new
                        {
                            CargosId = new Guid("00000000-0000-0000-0000-000000000035"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000024")
                        },
                        new
                        {
                            CargosId = new Guid("00000000-0000-0000-0000-000000000036"),
                            ProductsId = new Guid("00000000-0000-0000-0000-000000000024")
                        });
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.AccessLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000081"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000082"),
                            Name = "Advanced"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000083"),
                            Name = "Basic"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000084"),
                            Name = "ManageUsers"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000085"),
                            Name = "CrudProducts"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000086"),
                            Name = "CrudCustomers"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000087"),
                            Name = "SalesRep"
                        });
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AccessLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FCMToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-100000000000",
                            AccessFailedCount = 0,
                            AccessLevelId = new Guid("00000000-0000-0000-0000-000000000081"),
                            ConcurrencyStamp = "4b277cc7-bcb0-4d91-8aab-08dc4b606f7a",
                            Email = "Admin@fedex.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FEDEX.COM",
                            NormalizedUserName = "ADMIN@FEDEX.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELAPDUahzRZnp6zaJAX9gFkAUGEMJbRUEONHKh1m96wGpjuTzoRFjxZZ7n2cJOZQJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BABUNAPLANINAVHODCHETERI",
                            TwoFactorEnabled = false,
                            UserName = "Admin@fedex.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-200000000000",
                            AccessFailedCount = 0,
                            AccessLevelId = new Guid("00000000-0000-0000-0000-000000000083"),
                            ConcurrencyStamp = "1YET1ANOTHER1UNIQUE1STRING1",
                            Email = "tom@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tom",
                            LastName = "Calme",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH/93ARn1WakbJ0/g7kuQBZRDyB5fOJtxRacY3lpl5OmebHgw/iZ+pxd8/ulLzDKRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1DIFFERENT1UNIQUE1STRING1",
                            TwoFactorEnabled = false,
                            UserName = "tom@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-300000000000",
                            AccessFailedCount = 0,
                            AccessLevelId = new Guid("00000000-0000-0000-0000-000000000083"),
                            ConcurrencyStamp = "2YET2ANOTHER2UNIQUE2STRING2",
                            Email = "sarah@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Vrout",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@GMAIL.COM",
                            NormalizedUserName = "SARAH@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI7Jq2oNWapizY+9ERAW/Cf50IoyOcBPcwtoGuiQ5rEobgU75ad7OEx0tl3zYNHQJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2DIFFERENT2UNIQUE2STRING2",
                            TwoFactorEnabled = false,
                            UserName = "sarah@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-400000000000",
                            AccessFailedCount = 0,
                            AccessLevelId = new Guid("00000000-0000-0000-0000-000000000082"),
                            ConcurrencyStamp = "3YET3ANOTHER3UNIQUE3STRING3",
                            Email = "milka@speedy.gr",
                            EmailConfirmed = true,
                            FirstName = "Milka",
                            LastName = "Stenis",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILKA@SPEEDY.GR",
                            NormalizedUserName = "MILKA@SPEEDY.GR",
                            PasswordHash = "AQAAAAIAAYagAAAAECIlqYxwXT5+41XybB80fpUGxyrPHn2RaK6nhTnqIM9AXEkgqTZr3QseFwCi4fmmWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3DIFFERENT3UNIQUE3STRING3",
                            TwoFactorEnabled = false,
                            UserName = "milka@speedy.gr"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-500000000000",
                            AccessFailedCount = 0,
                            AccessLevelId = new Guid("00000000-0000-0000-0000-000000000082"),
                            ConcurrencyStamp = "3YET3ANOTHER3UNIQUE3STRING3",
                            Email = "s@t.com",
                            EmailConfirmed = true,
                            FirstName = "Sve",
                            LastName = "Tod",
                            LockoutEnabled = false,
                            NormalizedEmail = "S@T.COM",
                            NormalizedUserName = "S@T.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEInGk3vQF62pNNq1/ERZChiJCbV33mwEtDCixctElzzvNPkfFjPD7GlJhdhIMUebA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3DIFFERENT3UNIQUE3STRING3",
                            TwoFactorEnabled = false,
                            UserName = "s@t.com"
                        });
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDangerous")
                        .HasColumnType("bit");

                    b.Property<double?>("TotalWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Cargos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            AppUserId = "00000000-0000-0000-0000-400000000000",
                            Destination = "Via Giambellino, 7, 20146 Milan MI, Italy",
                            IsDangerous = false,
                            TotalWeight = 1500.5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            AppUserId = "00000000-0000-0000-0000-400000000000",
                            Destination = "Cody Road, London E16 4SR, United Kingdom",
                            IsDangerous = false,
                            TotalWeight = 2900.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            AppUserId = "00000000-0000-0000-0000-400000000000",
                            Destination = "Kustlaan 32, 8380 Bruges, Belgium",
                            IsDangerous = false,
                            TotalWeight = 1500.5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000034"),
                            AppUserId = "00000000-0000-0000-0000-400000000000",
                            Destination = "Prof. Tsvetan Lazarov 3, 1592 Sofia, Bulgaria",
                            IsDangerous = false,
                            TotalWeight = 2900.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000035"),
                            AppUserId = "00000000-0000-0000-0000-300000000000",
                            Destination = "Heiststraat 10, 8380 Bruges, Belgium",
                            IsDangerous = true,
                            TotalWeight = 500.5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000036"),
                            AppUserId = "00000000-0000-0000-0000-500000000000",
                            Destination = "Berolinastraße 7, 10178 Berlin, Germany",
                            IsDangerous = true,
                            TotalWeight = 900.0
                        });
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Sportswear"
                        });
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Smartphone"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Toaster"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Gaz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000060",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000061",
                            Name = "Advanced",
                            NormalizedName = "ADVANCED"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000062",
                            Name = "BASIC",
                            NormalizedName = "BASIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-100000000000",
                            RoleId = "00000000-0000-0000-0000-000000000060"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-300000000000",
                            RoleId = "00000000-0000-0000-0000-000000000062"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-200000000000",
                            RoleId = "00000000-0000-0000-0000-000000000062"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-400000000000",
                            RoleId = "00000000-0000-0000-0000-000000000061"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-500000000000",
                            RoleId = "00000000-0000-0000-0000-000000000061"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CargoProduct", b =>
                {
                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.Cargo", null)
                        .WithMany()
                        .HasForeignKey("CargosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.AppUser", b =>
                {
                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.AccessLevel", "AccessLevel")
                        .WithMany()
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccessLevel");
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.Cargo", b =>
                {
                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.AppUser", "AppUser")
                        .WithMany("Cargos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.Product", b =>
                {
                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mde.Project.Mobile.WebAPI.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mde.Project.Mobile.WebAPI.Entities.AppUser", b =>
                {
                    b.Navigation("Cargos");
                });
#pragma warning restore 612, 618
        }
    }
}
